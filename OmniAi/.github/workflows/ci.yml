name: OmniAI CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Verify environment setup
      run: npm run verify-env
      env:
        SHOPIFY_API_KEY: ${{ secrets.SHOPIFY_API_KEY || 'test-key' }}
        SHOPIFY_API_SECRET: ${{ secrets.SHOPIFY_API_SECRET || 'test-secret' }}
        SHOPIFY_APP_URL: ${{ secrets.SHOPIFY_APP_URL || 'https://test.com' }}
        SHOPIFY_AUTH_CALLBACK_URL: ${{ secrets.SHOPIFY_AUTH_CALLBACK_URL || 'https://test.com/auth/callback' }}
        SHOPIFY_APP_SCOPES: 'read_products,write_products,read_orders,write_orders'
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'test-openai-key' }}
        SESSION_SECRET: ${{ secrets.SESSION_SECRET || 'test-session-secret-32-chars-long-for-testing' }}
        NODE_ENV: test
    
    - name: Run linter
      run: npm run lint
    
    - name: Run type check
      run: npm run typecheck
    
    - name: Run tests
      run: npm run test:coverage
      env:
        SHOPIFY_API_KEY: 'test-key'
        SHOPIFY_API_SECRET: 'test-secret'
        SHOPIFY_APP_URL: 'https://test.com'
        OPENAI_API_KEY: 'test-openai-key'
        SESSION_SECRET: 'test-session-secret-32-chars-long-for-testing'
        NODE_ENV: test
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
    
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    
    - name: Run Playwright tests
      run: npm run test:e2e
      env:
        SHOPIFY_API_KEY: 'test-key'
        SHOPIFY_API_SECRET: 'test-secret'
        SHOPIFY_APP_URL: 'https://test.com'
        OPENAI_API_KEY: 'test-openai-key'
        SESSION_SECRET: 'test-session-secret-32-chars-long-for-testing'
        NODE_ENV: test
    
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        SHOPIFY_API_KEY: 'build-key'
        SHOPIFY_API_SECRET: 'build-secret'
        SHOPIFY_APP_URL: 'https://build.com'
        OPENAI_API_KEY: 'build-openai-key'
        SESSION_SECRET: 'build-session-secret-32-chars-long-for-building'
        NODE_ENV: production
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: |
          build/
          public/build/

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: npm audit --audit-level high
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # Add your deployment commands here
        # For example, if using Heroku:
        # git push heroku main
        # Or if using Vercel:
        # vercel --prod
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }} 