{
  "version": 3,
  "sources": ["../../../app/routes/billing.callback.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\billing.callback.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\billing.callback.tsx\");\n  import.meta.hot.lastModified = \"1751565939873.071\";\n}\n// REMIX HMR END\n\nimport { redirect } from \"@remix-run/node\";\nimport { BillingService } from \"~/services/billing.server\";\nimport { Logger } from \"~/utils/logger.server\";\nconst logger = new Logger('billing-callback');\nexport const loader = async ({\n  request\n}) => {\n  const billingService = BillingService.getInstance();\n  try {\n    const url = new URL(request.url);\n    const chargeId = url.searchParams.get('charge_id');\n    if (!chargeId) {\n      logger.error('No charge_id provided in billing callback');\n      return redirect('/?error=billing_failed');\n    }\n\n    // Activate the subscription\n    const success = await billingService.activateSubscription(request, chargeId);\n    if (!success) {\n      logger.error('Failed to activate subscription', {\n        chargeId\n      });\n      return redirect('/?error=activation_failed');\n    }\n\n    // Verify the subscription is now active\n    const subscription = await billingService.getUserSubscription(request);\n    if (!subscription || subscription.status !== 'active') {\n      logger.error('Subscription not active after activation', {\n        chargeId\n      });\n      return redirect('/?error=subscription_not_active');\n    }\n    logger.info('Billing callback successful', {\n      chargeId,\n      planId: subscription.planId,\n      subscriptionId: subscription.id\n    });\n\n    // Redirect to app with success message\n    return redirect('/app?subscribed=true');\n  } catch (error) {\n    logger.error('Billing callback error', error);\n    return redirect('/?error=billing_callback_failed');\n  }\n};\n\n// This route only handles the callback, no component needed\nexport default function BillingCallback() {\n  return null;\n}\n_c = BillingCallback;\nvar _c;\n$RefreshReg$(_c, \"BillingCallback\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAoBA,kBAAyB;AACzB,qBAA+B;AAC/B,oBAAuB;AArBvB,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,4CAA8C,EAAE;AAAA,EACzF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAON,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAmC;AACnC,cAAY,IAAI,eAAe;AACjC;AAMA,IAAM,SAAS,IAAI,qBAAO,kBAAkB;AA6C7B,SAAR,kBAAmC;AACxC,SAAO;AACT;AACA,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,iBAAiB;AAElC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
